@page
@model AutoExchangingModel
@{
    ViewData["Title"] = "Auto Exchanging";
    ViewData["CardTitle"] = "Configuration";
}

@using Kendo.Mvc.UI
@using RetroMikeMiningTools.DO
@using RetroMikeMiningTools.DTO
@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery Xsrf
@Html.AntiForgeryToken()

<style>
  #logGrid > table
  {
      table-layout: fixed;
  }
  .k-grid td{
    white-space: nowrap;
    text-overflow: ellipsis;
    max-width : 100px;
  }
  .k-grid .k-dirty {
    display: none;
  }

</style>
<script>
    function coinsTemplate(items) {
        if(items){
        var template = "<ul>";
        for (var i = 0; i < items.length; i++){
            template += "<li>" + items[i].Ticker + "</li>";
        }
        template += "</ul>";
        return template;
        }
        return '';
    }

    function cleanText(item){
        if(item){
            return item;
        }else{
            return "";
        }
    }
</script>
@(Html.Kendo().Grid<ExchangeConfig>
    ().Name("grid")
    .Sortable()
    .Editable()
    .Selectable()
    .Filterable()
    .Scrollable()
    .Events(x => x.Change("handleExchangeSelection"))
    .ToolBar(toolbar=> {
        toolbar.Create();
    })
    .Columns(columns =>
    {
        columns.Bound(column => column.Exchange).Width(150);
        columns.Bound(column => column.DestinationCoin).ClientTemplate("#=cleanText(DestinationCoin?.Ticker)#").ClientHeaderTemplate("Destination").Width(150);
        columns.Bound(column => column.ExcludedSourceCoins).ClientTemplate("#=coinsTemplate(ExcludedSourceCoins)#").ClientHeaderTemplate("Exclusions").Width(150);
        columns.Bound(column => column.TradingPairCurrency).ClientTemplate("#=cleanText(TradingPairCurrency?.Ticker)#").ClientHeaderTemplate("Trading Pair").Width(150);
        columns.Bound(column => column.ApiKey).ClientTemplate("#=maskData(ApiKey)#").Width(100);
        columns.Bound(column => column.ApiSecret).ClientTemplate("#=maskData(ApiSecret)#").Width(100);
        columns.Bound(column => column.Passphrase).ClientTemplate("#=maskData(Passphrase)#").Width(100);
        columns.Bound(column => column.AutoMoveToTradingAccount).ClientHeaderTemplate("Auto Move to Trading Account").Width(200);
        columns.Bound(column => column.AutoWithdrawl).ClientHeaderTemplate("Auto Withdrawl").Width(150);
        columns.Bound(column => column.WithdrawlNetwork).ClientHeaderTemplate("Withdrawl Network").Width(150);
        columns.Bound(column => column.AutoWithdrawlAddress).ClientHeaderTemplate("Auto Withdrawl Address").Width(150);
        columns.Bound(column => column.AutoWithdrawlCurrency).ClientTemplate("#=cleanText(AutoWithdrawlCurrency?.Ticker)#").ClientHeaderTemplate("Withdrawl Coin").Width(150);
        columns.Bound(column => column.AutoWithdrawlMin).ClientHeaderTemplate("Auto Widthdrawl Min").Width(150);
        columns.Bound(column => column.WithdrawlFee).ClientHeaderTemplate("Widthdrawl Fee").Width(150);
        columns.Bound(column => column.Enabled).ClientHeaderTemplate("Enabled").Width(150);
        columns.Command(column =>
        {
            column.Edit();
            column.Destroy();
        }).Width(200);
    })
    .DataSource(ds => ds.Ajax()
    .Read(r => r.Url("/AutoExchanging?handler=Read").Data("forgeryToken"))
    .Update(u => u.Url("/AutoExchanging?handler=Update").Data("forgeryToken"))
    .Create(c => c.Url("/AutoExchanging?handler=Create").Data("forgeryToken"))
    .Destroy(d => d.Url("/AutoExchanging?handler=Destroy").Data("forgeryToken"))
    .Model(m => {
        m.Id(id => id.Id);
        m.Field(o => o.ExcludedSourceCoins).DefaultValue(new List<Coin>());
            m.Field(o => o.DestinationCoin).DefaultValue(new Coin());
            m.Field(o => o.TradingPairCurrency).DefaultValue(new Coin());
            m.Field(o => o.AutoWithdrawlCurrency).DefaultValue(new Coin());
    })
    )
)

<div id="balanceContainer">
    <br />
    <div class="k-card-header">
        <h4>Balances</h4>
    </div>
    <div class="k-card-body">
        @(Html.Kendo().Grid<ExchangeBalance>
            ().Name("balancesGrid")
            .Sortable()
            .Filterable()
            .Columns(columns =>
            {
                columns.Bound(column => column.Ticker).ClientHeaderTemplate("Coin");
                columns.Bound(column => column.BalanceDisplayVal).ClientHeaderTemplate("Balance");
                columns.Bound(column => column.UsdDisplayVal).ClientHeaderTemplate("Balance (USD)");
            })
            .DataSource(ds => ds.Ajax()
            .Sort(x => x.Add("Ticker"))
            .Read(r => r.Url("/AutoExchanging?handler=ReadBalances").Data("forgeryToken"))
            )
        )
    </div>
</div>

<script>
    function forgeryToken() {
        return kendo.antiForgeryTokens();
    }
    function exchangeIdChanged(e){
        var exchangeId = $("#Exchange").val();
        if (exchangeId) {
            $("#DestinationCoin").data("kendoDropDownList").dataSource.read({ exchangeId: exchangeId });
            $("#ExcludedSourceCoins").data("kendoMultiSelect").dataSource.read({ exchangeId: exchangeId });
            $("#TradingPairCurrency").data("kendoDropDownList").dataSource.read({ exchangeId: exchangeId });
        }
    }
    function multiListOpen(e){
        var exchangeId = $("#Exchange").val();
        $("#ExcludedSourceCoins").data("kendoMultiSelect").dataSource.read({ exchangeId: exchangeId });
    }
    function ddlOpen(e){
        var exchangeId = $("#Exchange").val();
        if (exchangeId) {
            e.sender.dataSource.read({ exchangeId: exchangeId });
        }
    }

    function handleExchangeSelection(){
        $("#balanceContainer").hide();
        var dataItem = this.dataItem(this.select());
        console.log(dataItem);
        $.ajax({
            url: "/AutoExchanging?handler=ExchangeRowSelect",
            type: 'POST',
            data: {
                exchangeId: dataItem.Exchange,
                apiKey: dataItem.ApiKey,
                apiSecret: dataItem.ApiSecret,
                passphrase: dataItem.Passphrase
            },
            headers: {
                RequestVerificationToken: $('input:hidden[name="__RequestVerificationToken"]').val()
            },
            success: function (response) {    
                $("#balanceContainer").show();
                $('#balancesGrid').data('kendoGrid').dataSource.read();
                $('#balancesGrid').data('kendoGrid').refresh();
            }
        });
    }

    function maskData(data) {
        if(data){
            return data.substring(0,3) + '.......';
        }
        return '';
    }

    $(document).ready(function(){
        $("#balanceContainer").hide();
    });
</script>